# AthenaXXX input file for demonstrating SFB turbulence with AMR
# Uses static refinement to test continuity of SFB driving across refinement boundaries

<comment>
problem   = sfb_turb_amr_test

<job>
basename  = SFBTurbAMRDemo    # problem ID: basename of output filenames

<mesh>
nghost    = 2          # Number of ghost cells
nx1       = 32         # Number of zones in X1-direction (reduced for testing)
x1min     = -1.0       # minimum value of X1
x1max     = 1.0        # maximum value of X1
ix1_bc    = periodic   # Inner-X1 boundary condition flag
ox1_bc    = periodic   # Outer-X1 boundary condition flag

nx2       = 32         # Number of zones in X2-direction
x2min     = -1.0       # minimum value of X2
x2max     = 1.0        # maximum value of X2
ix2_bc    = periodic   # Inner-X2 boundary condition flag
ox2_bc    = periodic   # Outer-X2 boundary condition flag

nx3       = 32         # Number of zones in X3-direction
x3min     = -1.0       # minimum value of X3
x3max     = 1.0        # maximum value of X3
ix3_bc    = periodic   # Inner-X3 boundary condition flag
ox3_bc    = periodic   # Outer-X3 boundary condition flag

<meshblock>
nx1       = 16         # Number of cells in each MeshBlock, X1-dir
nx2       = 16         # Number of cells in each MeshBlock, X2-dir
nx3       = 16         # Number of cells in each MeshBlock, X3-dir

<mesh_refinement>
refinement = static     # type of refinement

# Create a refined spherical shell region
<refinement1>
level = 1
x1min = -0.7
x1max = 0.7
x2min = -0.7
x2max = 0.7
x3min = -0.7
x3max = 0.7

# Create a more refined inner sphere
<refinement2>
level = 2
x1min = -0.3
x1max = 0.3
x2min = -0.3
x2max = 0.3
x3min = -0.3
x3max = 0.3

<time>
evolution  = dynamic   # dynamic/kinematic/static
integrator = rk2       # time integration algorithm
cfl_number = 0.3       # The Courant, Friedrichs, & Lewy (CFL) Number
nlim       = 20        # cycle limit (run longer to see forcing)
tlim       = 0.05      # time limit
ndiag      = 1         # cycles between diagnostic output

<hydro>
eos         = ideal    # EOS type
reconstruct = plm      # spatial reconstruction method
rsolver     = hllc     # Riemann-solver to be used
gamma       = 1.4      # gamma = C_p/C_v

<problem>
rho0      = 1.0        # uniform density
pgas0     = 1.0        # uniform pressure
vx0       = 0.0        # no mean flow
vy0       = 0.0
vz0       = 0.0

<turb_driving>
type      = hydro
basis_type = 1         # 0=Cartesian, 1=SphericalFB
tcorr     = 0.5        # correlation time
dedt      = 0.1        # energy injection rate
nlow      = 1          # minimum wavenumber
nhigh     = 4          # maximum wavenumber
rseed     = -123       # random seed for reproducibility

# SFB-specific parameters
r0_turb   = 0.8        # outer radius for SFB driving
lmax      = 3          # maximum angular quantum number (reduced for testing)
nmax      = 3          # maximum radial mode number (reduced for testing)

# Center the driving at origin
x_turb_center = 0.0
y_turb_center = 0.0
z_turb_center = 0.0

# Very short update time to see the initial pattern quickly
dt_turb_update = 0.001

<output1>
file_type  = bin       # Binary output to see the force directly
variable   = turb_force # turbulence forcing
dt         = 0.02      # output more frequently